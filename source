/*
  The codes used on an Arduino Nano to get the Smuggler's Room Droid Interface kit to light up and spin
  Goals include the use of individually addressable LEDs and a stepper motor to tell a story of a droid
  attempting to hack into an imperial system.
  This code is also written and provided to the Smuggler's Room Facebook group to help get other in the
  community to get their kit to work. So, notes are provided with that in mind.
*/

// Define LED data
#include "FastLED.h" //Using this library
#define NUM_LEDS 20 //Number of LEDs being used
#define Data_Pin 5 //Nano pin being used 
#define chipset WS2812B //Type of lights being used
CRGB leds[NUM_LEDS];

//Define motor pins
const int dirPin = 2;
const int stepPin = 3;
const int stepsPerRevolution = 200; //Number of steps in a revolution for this motor

//Define the variables for random and seconds
long randomNumber; //Define using random number to select what lights to light up
int seconds; //Using this when making calls to the motor

/*
This array lists the colors used in the lighting, except White and Red.  
The first three are the Vent colors and the last 4 are the wheel colors.
*/
CRGB rotateColor [] = {
  CRGB::Blue,
  CRGB::Teal,
  CRGB::DeepPink,
  CRGB::Yellow,
  CRGB::DarkOrange,
  CRGB::DarkCyan,
  CRGB::Turquoise
};

void setup()
{
  FastLED.addLeds<chipset, Data_Pin, GRB>(leds, NUM_LEDS); //Define LED data - note these lights are Green, Red, Blue (GRB) not RGB
  //Declare pins as Outputs
  pinMode(stepPin, OUTPUT);
  pinMode(dirPin, OUTPUT);
}

void loop()
{
  delay(300); //A pause for a safe boot up of all the equipment
  randomSeed(analogRead(A0));  //Get a random seed from Analog 0
  topVent(); //Top vent with 3 LEDs
  frontVent(); //First 3 LEDS are tied to the front vent
  delay(500); //Pause before continuing
  tiles(); //2 LEDS are the front tile buttons
  ventBottom(); // Large vents across the bottom - three on each side - six in total
  interface(); //The last 6 LEDs around the wheels
  delay(1000); //A dramitic                     PAUSE
  tiles(); //Calling this a second time breaks the linear-ness
  stepper(); //Call the mottor fuction
  finish(); //An ending light sequence
  delay(700);
}

void frontVent ()
/*
  I am using a white light because the plastic cover is orange and white is the brightest.
  3 lights are tied to this function. The lights turn on one by one, then all off, and then all on.
*/
{
  for (int i = 0; i < 3; i++) //Turns on the lights one at a time
  {
    leds[i] = CRGB::White;
    FastLED.show();
    delay(300);
  }
  //Make the lights flash by calling another function
  for (int x = 0; x < 3; x++) //Flash the lights 4 times
  {
    frontVentFlash();
  }
}

void frontVentFlash() // Turns the lights on the front vent (orange) on and off
{
  for (int i = 0; i < 3; i++) //Turns off the lights all at once
  {
    leds[i] = CRGB::Black;
  }
  FastLED.show();
  delay(300);
  for (int i = 0; i < 3; i++) //Turns on the lights all at once
  {
    leds[i] = CRGB::White;
  }
  FastLED.show();
  delay(200);
}

void tiles()
/*
  These are the static blue and white buttons on the face of the unit. Called tiles in build instructions.
  The plastic is colored, so both lights are set to white. The code flashes the lights on and off.
*/
{
  for (int x = 0; x < 6; x++) //Flash the lights 6 times
  {
    randomNumber = random(3, 5); //Chose a random light to flash 
    flash(randomNumber); //Call function to turn on and off the light
  }
  leds[4] = CRGB::White; //Turn on and leave on light 4.
  FastLED.show();
  delay(300);
}

void flash(int r) //Function that flashes the tile lights
{
  leds[r] = CRGB::White;
  FastLED.show();
  delay(300);
  leds[r] = CRGB::Black;
  FastLED.show();
  delay(300);
}

void topVent() // Small vent on top with 3 lights, lights up at once.
{
  for (int i = 5; i < 8; i++) //Turn on all lights at once
  {
    leds[i] = CRGB::DarkViolet;
  }
  FastLED.show();
  delay(500);
}

void ventBottom()
// Two small vents on the bottom with 3 lights each. These light up and change colors sequentially.
{
  for (int r = 0; r < 3; r++) //Cycle through the colors in the array.
  {
    for (int i = 8; i < 14; i++) //Sequential lighting
    {
      leds[i] = rotateColor[r];
      FastLED.show();
      delay(300);
    }
  }
}

void interface() //These 6 LEDs around the wheels light up and change colors.
{
  for (int i = 14; i < 21; i++) //Turn the lights on at once
  {
    leds[i] = CRGB::Yellow;
  }
  FastLED.show();
  delay(300);
  for (int r = 4; r < 7; r++) //Cycle through the colors in the array.
  {
    for (int i = 17; i < 27; i++) //Sequential lighting
    {
      leds[i] = rotateColor[r];
      FastLED.show();
      delay(300);
    }
  }
}

void stepper()
/*
  This spins the motor. The final code includes lighting effects.
  800 is the fastest spin I could get working and 3000 the slowest with the selected motor.
  This code has the motor spinning clockwise and anticlockwise, but the separate functions mean
  you can call the functions to go in one direction multiple time.
*/
{
  seconds = 2000; //This is the speed the motor will spin, larger = slower
  stepperRight (seconds); //Call function to spin motor
  delay(300); //Pause before spinning the other direction
  seconds = 1800;
  stepperLeft (seconds);
  delay(200);
  seconds = 1500;
  stepperRight (seconds);
  red(); //The alert or error that causes everything to go red
  delay(2000); //A Pause to let the color sink in
  seconds = 2500;
  stepperLeft (seconds);
  delay(300);
  seconds = 3000;
  stepperRight (seconds);
  delay(500);
  seconds = 1500;
  stepperLeft (seconds);
}

void stepperRight (int s) //Clockwise
{
  digitalWrite(dirPin, HIGH); // Set motor direction clockwise
  randomNumber = random(200, 600); //Chose a random amount of spin, between 1 and 3 rotations
  for (int i = 0; i < randomNumber; i ++)
  {
    digitalWrite(stepPin, HIGH);
    delayMicroseconds(s);
    digitalWrite(stepPin, LOW);
    delayMicroseconds(s);
  }
}

void stepperLeft (int s) //anticlockwise
{
  digitalWrite(dirPin, LOW); // Set motor direction anticlockwise
  randomNumber = random(200, 600); //Chose a random amount of spin, between 1 and 3 rotations
  for (int i = 0; i < randomNumber; i ++)
  {
    digitalWrite(stepPin, HIGH);
    delayMicroseconds(s);
    digitalWrite(stepPin, LOW);
    delayMicroseconds(s);
  }
}

void red() //Change color like a warning it is going wrong
{
  for (int i = 14; i < 21; i++) //Wheel lights all go red at once
  {
    leds[i] = CRGB::Red;
  }
  FastLED.show();
}

void finish() //End sequence that turns all the lights to one color and then off.
{
  for (int i = 21; i > 0; i--) //Quickly turn on all the lights stepping backwards
  {
    leds[i] = CRGB::DarkCyan;
    FastLED.show();
    delay(50);
  }
  //Call to spin the motor again. Like everything is find and the system is resetting
  seconds = 2000;
  stepperRight (seconds);
  delay(500); //Pause before turning everything all off
  for (int i = 0; i < NUM_LEDS; i++)//Turn off the lights
  {
    leds[i] = CRGB::Black;
  }
  FastLED.show();
}
